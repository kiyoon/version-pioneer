from __future__ import annotations

import tempfile
import textwrap
from pathlib import Path
from typing import Any

import toml
from hatchling.builders.hooks.plugin.interface import BuildHookInterface


class CustomBuildHook(BuildHookInterface):
    def initialize(self, version: str, build_data: dict[str, Any]) -> None:
        if version == "editable":
            return

        pyproject_toml = toml.load(Path(self.root) / "pyproject.toml")

        # evaluate the original _version.py file to get the computed version
        version_py = Path(
            pyproject_toml["tool"]["hatch"]["version"]["path"]
        ).read_text()
        exec(version_py, globals())  # __version_dict__ is defined here

        # replace the file with the constant version
        self.temp_version_file = tempfile.NamedTemporaryFile(mode="w", delete=True)  # noqa: SIM115
        self.temp_version_file.write(
            textwrap.dedent(f"""
                #!/usr/bin/env python3
                # This file is generated by version-pioneer
                # by evaluating the original _version.py file and storing the computed versions as a constant.

                __version_dict__ = {__version_dict__}
                __version__ = __version_dict__["version"]
                
                if __name__ == "__main__":
                    import json

                    print(json.dumps(__version_dict__))
            """)
        )
        self.temp_version_file.flush()

        build_data["force_include"][self.temp_version_file.name] = (
            "src/ml_project/_version.py"
        )

    def finalize(
        self,
        version: str,
        build_data: dict[str, Any],
        artifact_path: str,
    ) -> None:
        if version == "editable":
            return

        # Delete the temporary version file
        self.temp_version_file.close()
