from __future__ import annotations

import tempfile
import textwrap
from pathlib import Path
from typing import Any

from hatchling.builders.hooks.plugin.interface import BuildHookInterface
from hatchling.plugin import hookimpl

import version_pioneer
from version_pioneer.utils.toml import load_toml


class VersionPioneerBuildHook(BuildHookInterface):
    PLUGIN_NAME = "version-pioneer"

    def initialize(self, version: str, build_data: dict[str, Any]) -> None:
        if version == "editable":
            return

        pyproject_toml = load_toml(Path(self.root) / "pyproject.toml")

        try:
            version_py_path = Path(
                pyproject_toml["tool"]["version-pioneer"]["version-py-path"]
            )
        except KeyError as e:
            raise ValueError(
                "The 'tool.version-pioneer' section in 'pyproject.toml' must have a 'version-py-path' key."
            ) from e

        # evaluate the original _version.py file to get the computed version
        version_py = version_py_path.read_text()
        module_globals = {}
        exec(version_py, module_globals)

        # replace the file with the constant version
        self.temp_version_file = tempfile.NamedTemporaryFile(mode="w", delete=True)  # noqa: SIM115
        self.temp_version_file.write(
            textwrap.dedent(f"""
                #!/usr/bin/env python3
                # This file is generated by version-pioneer {version_pioneer.__version__}
                # by evaluating the original _version.py file and storing the computed versions as a constant.

                __version_dict__ = {module_globals["__version_dict__"]}
                __version__ = __version_dict__["version"]
                
                if __name__ == "__main__":
                    import json

                    print(json.dumps(__version_dict__))
            """)
        )
        self.temp_version_file.flush()

        build_data["force_include"][self.temp_version_file.name] = str(version_py_path)

    def finalize(
        self,
        version: str,
        build_data: dict[str, Any],
        artifact_path: str,
    ) -> None:
        if version == "editable":
            return

        # Delete the temporary version file
        self.temp_version_file.close()


@hookimpl
def hatch_register_build_hook() -> type[BuildHookInterface]:
    return VersionPioneerBuildHook
