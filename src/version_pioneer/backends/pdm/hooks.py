import stat
import textwrap
from pathlib import Path

from pdm.backend.hooks.base import Context


class VersionPioneerBuildHook:
    def pdm_build_initialize(self, context: Context):
        # Update metadata version
        versionfile_source = Path(
            context.config.data["tool"]["version-pioneer"]["versionfile-source"]
        )
        versionfile_code = versionfile_source.read_text()
        version_module_globals = {}
        exec(versionfile_code, version_module_globals)
        context.config.metadata["version"] = version_module_globals["__version__"]

        # Write the static version file
        if context.target != "editable":
            versionfile_build = context.build_dir / Path(
                context.config.data["tool"]["version-pioneer"]["versionfile-build"]
            )
            context.ensure_build_dir()
            versionfile_build.parent.mkdir(parents=True, exist_ok=True)
            versionfile_build.write_text(
                textwrap.dedent(f"""
                    #!/usr/bin/env python3
                    # This file is generated by version-pioneer
                    # by evaluating the original _version.py file and storing the computed versions as a constant.

                    __version_dict__ = {version_module_globals["__version_dict__"]}
                    __version__ = __version_dict__["version"]

                    if __name__ == "__main__":
                        import json

                        print(json.dumps(__version_dict__))
                """).strip()
            )
            # make it executable
            versionfile_build.chmod(versionfile_build.stat().st_mode | stat.S_IEXEC)
